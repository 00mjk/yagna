/*
 * Golem Market API
 *
 * Market API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProviderPropertyQuery {
    #[serde(rename = "eventType")]
    event_type: String,
    #[serde(rename = "requestorId")]
    requestor_id: String,
    #[serde(rename = "requestorDesc")]
    requestor_desc: Option<Value>,
    #[serde(rename = "queryId")]
    query_id: Option<String>,
    #[serde(rename = "queriedProps")]
    queried_props: Option<Vec<String>>,
}

impl ProviderPropertyQuery {
    pub fn new(event_type: String, requestor_id: String) -> ProviderPropertyQuery {
        ProviderPropertyQuery {
            event_type: event_type,
            requestor_id: requestor_id,
            requestor_desc: None,
            query_id: None,
            queried_props: None,
        }
    }

    pub fn set_event_type(&mut self, event_type: String) {
        self.event_type = event_type;
    }

    pub fn with_event_type(mut self, event_type: String) -> ProviderPropertyQuery {
        self.event_type = event_type;
        self
    }

    pub fn event_type(&self) -> &String {
        &self.event_type
    }

    pub fn set_requestor_id(&mut self, requestor_id: String) {
        self.requestor_id = requestor_id;
    }

    pub fn with_requestor_id(mut self, requestor_id: String) -> ProviderPropertyQuery {
        self.requestor_id = requestor_id;
        self
    }

    pub fn requestor_id(&self) -> &String {
        &self.requestor_id
    }

    pub fn set_requestor_desc(&mut self, requestor_desc: Value) {
        self.requestor_desc = Some(requestor_desc);
    }

    pub fn with_requestor_desc(mut self, requestor_desc: Value) -> ProviderPropertyQuery {
        self.requestor_desc = Some(requestor_desc);
        self
    }

    pub fn requestor_desc(&self) -> Option<&Value> {
        self.requestor_desc.as_ref()
    }

    pub fn reset_requestor_desc(&mut self) {
        self.requestor_desc = None;
    }

    pub fn set_query_id(&mut self, query_id: String) {
        self.query_id = Some(query_id);
    }

    pub fn with_query_id(mut self, query_id: String) -> ProviderPropertyQuery {
        self.query_id = Some(query_id);
        self
    }

    pub fn query_id(&self) -> Option<&String> {
        self.query_id.as_ref()
    }

    pub fn reset_query_id(&mut self) {
        self.query_id = None;
    }

    pub fn set_queried_props(&mut self, queried_props: Vec<String>) {
        self.queried_props = Some(queried_props);
    }

    pub fn with_queried_props(mut self, queried_props: Vec<String>) -> ProviderPropertyQuery {
        self.queried_props = Some(queried_props);
        self
    }

    pub fn queried_props(&self) -> Option<&Vec<String>> {
        self.queried_props.as_ref()
    }

    pub fn reset_queried_props(&mut self) {
        self.queried_props = None;
    }
}
