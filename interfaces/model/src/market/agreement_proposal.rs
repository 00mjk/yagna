/*
 * Golem Market API
 *
 * Market API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct AgreementProposal {
    #[serde(rename = "id")]
    id: String,
    #[serde(rename = "demand")]
    demand: crate::market::Proposal,
    #[serde(rename = "offer")]
    offer: crate::market::Proposal,
}

impl AgreementProposal {
    pub fn new(
        id: String,
        demand: crate::market::Proposal,
        offer: crate::market::Proposal,
    ) -> AgreementProposal {
        AgreementProposal {
            id: id,
            demand: demand,
            offer: offer,
        }
    }

    pub fn set_id(&mut self, id: String) {
        self.id = id;
    }

    pub fn with_id(mut self, id: String) -> AgreementProposal {
        self.id = id;
        self
    }

    pub fn id(&self) -> &String {
        &self.id
    }

    pub fn set_demand(&mut self, demand: crate::market::Proposal) {
        self.demand = demand;
    }

    pub fn with_demand(mut self, demand: crate::market::Proposal) -> AgreementProposal {
        self.demand = demand;
        self
    }

    pub fn demand(&self) -> &crate::market::Proposal {
        &self.demand
    }

    pub fn set_offer(&mut self, offer: crate::market::Proposal) {
        self.offer = offer;
    }

    pub fn with_offer(mut self, offer: crate::market::Proposal) -> AgreementProposal {
        self.offer = offer;
        self
    }

    pub fn offer(&self) -> &crate::market::Proposal {
        &self.offer
    }
}
