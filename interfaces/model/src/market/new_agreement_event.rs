/*
 * Market API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct NewAgreementEvent {
    #[serde(rename = "eventType")]
    event_type: String,
    #[serde(rename = "requestorId")]
    requestor_id: String,
    #[serde(rename = "agreementId")]
    agreement_id: Option<String>,
    #[serde(rename = "demand")]
    demand: Option<crate::market::Demand>,
    #[serde(rename = "providerId")]
    provider_id: Option<String>,
    #[serde(rename = "offer")]
    offer: Option<crate::market::Offer>,
}

impl NewAgreementEvent {
    pub fn new(event_type: String, requestor_id: String) -> NewAgreementEvent {
        NewAgreementEvent {
            event_type: event_type,
            requestor_id: requestor_id,
            agreement_id: None,
            demand: None,
            provider_id: None,
            offer: None,
        }
    }

    pub fn set_event_type(&mut self, event_type: String) {
        self.event_type = event_type;
    }

    pub fn with_event_type(mut self, event_type: String) -> NewAgreementEvent {
        self.event_type = event_type;
        self
    }

    pub fn event_type(&self) -> &String {
        &self.event_type
    }

    pub fn set_requestor_id(&mut self, requestor_id: String) {
        self.requestor_id = requestor_id;
    }

    pub fn with_requestor_id(mut self, requestor_id: String) -> NewAgreementEvent {
        self.requestor_id = requestor_id;
        self
    }

    pub fn requestor_id(&self) -> &String {
        &self.requestor_id
    }

    pub fn set_agreement_id(&mut self, agreement_id: String) {
        self.agreement_id = Some(agreement_id);
    }

    pub fn with_agreement_id(mut self, agreement_id: String) -> NewAgreementEvent {
        self.agreement_id = Some(agreement_id);
        self
    }

    pub fn agreement_id(&self) -> Option<&String> {
        self.agreement_id.as_ref()
    }

    pub fn reset_agreement_id(&mut self) {
        self.agreement_id = None;
    }

    pub fn set_demand(&mut self, demand: crate::market::Demand) {
        self.demand = Some(demand);
    }

    pub fn with_demand(mut self, demand: crate::market::Demand) -> NewAgreementEvent {
        self.demand = Some(demand);
        self
    }

    pub fn demand(&self) -> Option<&crate::market::Demand> {
        self.demand.as_ref()
    }

    pub fn reset_demand(&mut self) {
        self.demand = None;
    }

    pub fn set_provider_id(&mut self, provider_id: String) {
        self.provider_id = Some(provider_id);
    }

    pub fn with_provider_id(mut self, provider_id: String) -> NewAgreementEvent {
        self.provider_id = Some(provider_id);
        self
    }

    pub fn provider_id(&self) -> Option<&String> {
        self.provider_id.as_ref()
    }

    pub fn reset_provider_id(&mut self) {
        self.provider_id = None;
    }

    pub fn set_offer(&mut self, offer: crate::market::Offer) {
        self.offer = Some(offer);
    }

    pub fn with_offer(mut self, offer: crate::market::Offer) -> NewAgreementEvent {
        self.offer = Some(offer);
        self
    }

    pub fn offer(&self) -> Option<&crate::market::Offer> {
        self.offer.as_ref()
    }

    pub fn reset_offer(&mut self) {
        self.offer = None;
    }
}
