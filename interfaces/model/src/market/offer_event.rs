/*
 * Golem Market API
 *
 * Market API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct OfferEvent {
    #[serde(rename = "eventType")]
    event_type: String,
    #[serde(rename = "providerId")]
    provider_id: String,
    #[serde(rename = "offer")]
    offer: Option<crate::market::Proposal>,
}

impl OfferEvent {
    pub fn new(event_type: String, provider_id: String) -> OfferEvent {
        OfferEvent {
            event_type: event_type,
            provider_id: provider_id,
            offer: None,
        }
    }

    pub fn set_event_type(&mut self, event_type: String) {
        self.event_type = event_type;
    }

    pub fn with_event_type(mut self, event_type: String) -> OfferEvent {
        self.event_type = event_type;
        self
    }

    pub fn event_type(&self) -> &String {
        &self.event_type
    }

    pub fn set_provider_id(&mut self, provider_id: String) {
        self.provider_id = provider_id;
    }

    pub fn with_provider_id(mut self, provider_id: String) -> OfferEvent {
        self.provider_id = provider_id;
        self
    }

    pub fn provider_id(&self) -> &String {
        &self.provider_id
    }

    pub fn set_offer(&mut self, offer: crate::market::Proposal) {
        self.offer = Some(offer);
    }

    pub fn with_offer(mut self, offer: crate::market::Proposal) -> OfferEvent {
        self.offer = Some(offer);
        self
    }

    pub fn offer(&self) -> Option<&crate::market::Proposal> {
        self.offer.as_ref()
    }

    pub fn reset_offer(&mut self) {
        self.offer = None;
    }
}
