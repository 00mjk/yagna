openapi: 3.0.2
info:
  version: "1.2.0"
  title: Yagna Market API
  description: >-
    ## Yagna Market

    The Yagna Market is a core component of the Yagna Network, which enables
    computational Offersand Demands circulation. The Market is open for all
    entities willing to buy computations (Demands) or monetize computational
    resources (Offers).

    ## Yagna Market API

    The Yagna Market API is the entry to the Yagna Market through which
    Requestors and Providers can publish their Demands and Offers
    respectively, find matching counterparty, conduct negotiations
    and make an agreement.


    This version of Market API conforms with capability level 1 of the
    <a href="https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg">
    Market API specification</a>.


    Each of the two roles: Requestors and Providers have their own interface
    in the Market API.


servers:
  - url: /market-api/v1

tags:
  - name: requestor
    description: Requestor part
  - name: provider
    description: Provider part

paths:

  /offers:
    post:
      tags:
        - provider
      summary: Publishes Offer
      operationId: subscribeOffer
      responses:
        '201':
          description: Offer published
          content:
            application/json:
              schema:
                type: string
                description: Subscription Id
        '400':
          description: Bad offer desciption
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
        description: Offer description
        required: true

  /offers/{subscriptionId}:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - provider
      operationId: unsubscribeOffer
      responses:
        '204':
          description: Offer revoked
        '404':
          description: Subscription not found

  /offers/{subscriptionId}/proposals/{proposalId}:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - provider
      summary: Fetches agreement proposal from proposal id.
      operationId: getProposalDemand
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementProposal'
    delete:
      tags:
        - provider
      summary: Rejects offer
      operationId: rejectProposal
      responses:
        '204':
          description: OK

  /offers/{subscriptionId}/proposals/{proposalId}/offer:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - provider
      summary: Creates agreement proposal
      operationId: createProposalOffer
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                description: Proposal Id
      requestBody:
        $ref: '#/components/requestBodies/Proposal'

  /offers/{subscriptionId}/events:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: timeout
        in: query
        schema:
          type: integer
          format: int32
      - name: maxEvents
        in: query
        schema:
          type: integer
          format: int32
    get:
      tags:
        - provider
      operationId: collectDemands
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderEvent'
        '404':
          description: Subscription not found

  /demands:
    post:
      tags:
        - requestor
      summary: Publishes Demand
      operationId: subscribeDemand
      responses:
        '201':
          description: Demand published
          content:
            application/json:
              schema:
                type: string
                description: Subscription id
        '400':
          description: Bad offer desciption
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Demand'
        description: Demand scpecification
        required: true

  /demands/{subscriptionId}:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - requestor
      operationId: unsubscribeDemand
      responses:
        '204':
          description: Demand revoked
        '404':
          description: Subscription not found

  /demands/{subscriptionId}/events:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: timeout
        in: query
        schema:
          type: integer
          format: int32
      - name: maxEvents
        in: query
        schema:
          type: integer
          format: int32
    get:
      tags:
        - requestor
      operationId: collectOffers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestorEvent'
        '404':
          description: Subscription not found

  /demands/{subscriptionId}/proposals/{proposalId}:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - requestor
      summary: Fetches agreement proposal from proposal id.
      operationId: getProposalOffer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementProposal'
        '404':
          description: Subscription not found
    delete:
      tags:
        - requestor
      summary: Rejects offer
      operationId: rejectProposalOffer
      responses:
        '204':
          description: OK

  /demands/{subscriptionId}/proposals/{proposalId}/demand:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - requestor
      summary: Creates agreement proposal
      operationId: createProposalDemand
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: Proposal Id
      requestBody:
        $ref: '#/components/requestBodies/Proposal'

  /agreements:
    post:
      tags:
        - requestor
      summary: Creates new agreement from proposal
      operationId: createAgreement
      responses:
        '201':
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agreement'
        required: true

  /agreements/{agreementId}:
    parameters:
      - name: agreementId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - requestor
      summary: Cancels agreement.
      operationId: cancelAgreement
      responses:
        '204':
          description: Agreement canceled

  /agreements/{agreementId}/reject:
    parameters:
      - name: agreementId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - provider
      summary: Rejects agreement.
      operationId: rejectAgreement
      responses:
        '200':
          description: Agreement rejected

  /agreements/{agreementId}/confirm:
    parameters:
      - name: agreementId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - requestor
      operationId: confirmAgreement
      summary: Approves agreement.
      responses:
        '200':
          description: OK

  /agreements/{agreementId}/wait:
    parameters:
      - name: agreementId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - requestor
      operationId: waitForApproval
      responses:
        '200':
          description: OK

  /agreements/{agreementId}/approve:
    parameters:
      - name: agreementId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - provider
      operationId: approveAgreement
      responses:
        '200':
          description: OK
components:
  requestBodies:
    Proposal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Proposal'
  schemas:
    Demand:
      type: object
      required:
        - properties
        - constraints
      properties:
        properties:
          type: object
        constraints:
          type: string
    Offer:
      type: object
      required:
        - properties
        - constraints
      properties:
        properties:
          type: object
        constraints:
          type: string
    Proposal:
      type: object
      required:
        - id
        - properties
        - constraints
      properties:
        id:
          type: string
        properties:
          type: object
        constraints:
          type: string
        prevProposalId:
          type: string
    AgreementProposal:
      type: object
      required:
        - id
        - demand
        - offer
      properties:
        id:
          type: string
        demand:
          $ref: '#/components/schemas/Proposal'
        offer:
          $ref: '#/components/schemas/Proposal'
    Agreement:
      type: object
      required:
        - proposalId
        - expirationDate
      properties:
        proposalId:
          type: string
        expirationDate:
          type: string
          format: date-time
    RequestorEvent:
      required:
        - eventType
        - providerId
      discriminator:
        propertyName: eventType
      properties:
        eventType:
          type: string
        providerId:
          type: string
    ProviderEvent:
      required:
        - eventType
        - requestorId
      discriminator:
        propertyName: eventType
      properties:
        eventType:
          type: string
        requestorId:
          type: string
      example:
        eventType: DemandEvent
        requestorId: 1172812402961
        demand:
          golem:
            arch: x86
    DemandEvent:
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
        - type: object
          properties:
            demand:
              $ref: '#/components/schemas/Proposal'
    OfferEvent:
      allOf:
        - $ref: '#/components/schemas/RequestorEvent'
        - type: object
          properties:
            offer:
              $ref: '#/components/schemas/Proposal'
    NewAgreementEvent:
      allOf:
        - $ref: '#/components/schemas/ProviderEvent'
        - type: object
          properties:
            agreementId:
              type: string
            requestorId:
              type: string
            demand:
              $ref: '#/components/schemas/Demand'
            providerId:
              type: string
            offer:
              $ref: '#/components/schemas/Offer'