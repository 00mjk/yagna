swagger: '2.0'

info:
  version: 1.1.0
  title: Yagna Market API
  description: |-
    ## Yagna Market

    The Yagna Market is a core component of the Yagna Network, which enables
    computational Offersand Demands circulation. The Market is open for all
    entities willing to buy computations (Demands) or monetize computational
    resources (Offers).

    ## Yagna Market API

    The Yagna Market API is the entry to the Yagna Market through which
    Requestors and Providers can publish their Demands and Offers
    respectively, find matching counterparty, conduct negotiations
    and make an agreement.

    Each of the two roles: Requestors and Providers have their own interface
    in the Market API.

    It conforms with capability level 1 of the
    <a href="https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg">
      Market API specification
    </a>.

basePath: /market-api/v1

tags:
  - name: requestor
    description: Requestor interface
  - name: provider
    description: Provider interface

schemes:
  - https
  - http

paths:

  ##########
  # Offers #
  ##########
  /offers:
    post:
      tags:
        - provider
      summary: Publishes Offer
      operationId: subscribe
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Offer description
          required: true
          schema:
            $ref: '#/definitions/Offer'
      responses:
        '201':
          description: Offer published
          schema:
            type: string
            description: Subscription Id
        '400':
          description: Bad offer desciption

  '/offers/{subscriptionId}':
    parameters:
      - name: subscriptionId
        type: string
        in: path
        required: true
    delete:
      tags:
        - provider
      operationId: unsubscribe
      responses:
        '204':
          description: Offer revoked
        '404':
          description: Subscription not found

  '/offers/{subscriptionId}/proposals/{proposalId}':
    parameters:
      - name: subscriptionId
        in: path
        required: true
        type: string
      - name: proposalId
        in: path
        required: true
        type: string
    get:
      tags:
        - provider
      summary: Fetches agreement proposal from proposal id.
      operationId: getProposal
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AgreementProposal'
    delete:
      tags:
        - provider
      summary: Rejects offer
      operationId: rejectProposal
      responses:
        204:
          description: OK

  '/offers/{subscriptionId}/proposals/{proposalId}/offer':
    parameters:
      - name: subscriptionId
        in: path
        required: true
        type: string
      - name: proposalId
        in: path
        required: true
        type: string
    post:
      tags:
        - provider
      summary: Creates agreement proposal
      operationId: createProposal
      consumes:
        - application/json
      parameters:
        - in: body
          name: proposal
          schema:
            $ref: '#/definitions/Proposal'
      responses:
        200:
          description: OK
          schema:
            type: string
            description: Proposal Id

  '/offers/{subscriptionId}/events':
    parameters:
      - name: subscriptionId
        type: string
        in: path
        required: true
      - name: timeout
        type: number
        format: float
        in: query
      - name: maxEvents
        type: integer
        format: int64
        in: query
    get:
      tags:
        - provider
      operationId: collect
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ProviderEvent'
        '404':
          description: Subscription not found

  ###########
  # DEMANDS #
  ###########
  '/demands':
    post:
      tags:
        - requestor
      summary: Publishes Demand
      operationId: subscribe
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Demand scpecification
          required: true
          schema:
            $ref: '#/definitions/Demand'
      responses:
        '201':
          description: Demand published
          schema:
            type: string
            description: Subscription id
        '400':
          description: Bad offer desciption

  '/demands/{subscriptionId}':
    parameters:
      - name: subscriptionId
        type: string
        in: path
        required: true
    delete:
      tags:
        - requestor
      operationId: unsubscribe
      responses:
        '204':
          description: Demand revoked
        '404':
          description: Subscription not found

  '/demands/{subscriptionId}/events':
    parameters:
      - name: subscriptionId
        type: string
        in: path
        required: true
      - name: timeout
        type: number
        format: float
        in: query
      - name: maxEvents
        type: integer
        format: int64
        in: query
    get:
      tags:
        - requestor
      operationId: collect
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/RequestorEvent'
        '404':
          description: Subscription not found

  '/demands/{subscriptionId}/proposals/{proposalId}':
    parameters:
      - name: subscriptionId
        in: path
        required: true
        type: string
      - name: proposalId
        in: path
        required: true
        type: string
    get:
      tags:
        - requestor
      summary: Fetches agreement proposal from proposal id.
      operationId: getProposal
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AgreementProposal'
        '404':
          description: Subscription not found

    delete:
      tags:
        - requestor
      summary: Rejects offer
      operationId: rejectProposal
      responses:
        204:
          description: OK

  '/demands/{subscriptionId}/proposals/{proposalId}/demand':
    parameters:
      - name: subscriptionId
        in: path
        required: true
        type: string
      - name: proposalId
        in: path
        required: true
        type: string
    post:
      tags:
        - requestor
      summary: Creates agreement proposal
      operationId: createProposal
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: demandProposal
          schema:
            $ref: '#/definitions/Proposal'
      responses:
        200:
          description: OK
          schema:
            type: string
            description: Proposal Id


  ##############
  # Agreements #
  ##############
  '/agreements':
    post:
      tags:
        - requestor
      summary: Creates new agreement from proposal
      operationId: createAgreement
      consumes:
        - application/json
      parameters:
        - name: agreement
          required: true
          in: body
          schema:
            $ref: '#/definitions/Agreement'
      responses:
        201:
          description: Created

  '/agreements/{agreementId}':
    parameters:
      - name: agreementId
        in: path
        type: string
        required: true
    delete:
      tags:
        - requestor
      summary: Cancels agreement.
      operationId: cancelAgreement
      responses:
        204:
          description: Agreement canceled

  '/agreements/{agreementId}/reject':
    parameters:
      - name: agreementId
        in: path
        type: string
        required: true
    post:
      tags:
        - provider
      summary: Rejects agreement.
      operationId: rejectAgreement
      responses:
        200:
          description: Agreement rejected

  '/agreements/{agreementId}/confirm':
    parameters:
      - name: agreementId
        in: path
        type: string
        required: true
    post:
      tags:
        - requestor
      operationId: confirmAgreement
      summary: Approves agreement.
      responses:
        200:
          description: OK

  '/agreements/{agreementId}/wait':
    parameters:
      - name: agreementId
        in: path
        type: string
        required: true
    post:
      tags:
        - requestor
      operationId: waitForApproval
      responses:
        200:
          description: OK

  '/agreements/{agreementId}/approve':
    parameters:
      - name: agreementId
        in: path
        type: string
        required: true
    post:
      tags:
        - provider
      operationId: approveAgreement
      responses:
        200:
          description: OK

definitions:

  Demand:
    type: object
    required:
      - properties
      - constraints
    properties:
      properties:
        type: object
      constraints:
        type: string

  Offer:
    type: object
    required:
      - properties
      - constraints
    properties:
      properties:
        type: object
      constraints:
        type: string

  Proposal:
    type: object
    required:
      - id
      - properties
      - constraints
    properties:
      id:
        type: string
      properties:
        type: object
      constraints:
        type: string
      prevProposalId:
        type: string

  AgreementProposal:
    type: object
    required:
      - id
      - demand
      - offer
    properties:
      id:
        type: string
      demand:
        $ref: '#/definitions/Proposal'
      offer:
        $ref: '#/definitions/Proposal'

  Agreement:
    type: object
    required:
      - proposalId
      - expirationDate
    properties:
      proposalId:
        type: string
      expirationDate:
        type: string
        format: date-time

  RequestorEvent:
    required:
      - eventType
      - providerId
    discriminator: eventType
    properties:
      eventType:
        type: string
      providerId:
        type: string

  ProviderEvent:
    required:
      - eventType
      - requestorId
    discriminator: eventType
    properties:
      eventType:
        type: string
      requestorId:
        type: string
    example:
      eventType: DemandEvent
      requestorId: 1172812402961
      demand:
        golem: ## TODO: should we change to yagna? (requires changes also in specs)
          arch: x86

  DemandEvent:
    allOf:
      - $ref: '#/definitions/ProviderEvent'
      - type: object
        properties:
          demand:
            $ref: '#/definitions/Proposal'

  OfferEvent:
    allOf:
      - $ref: '#/definitions/RequestorEvent'
      - type: object
        properties:
          offer:
            $ref: '#/definitions/Proposal'

  NewAgreementEvent:
    allOf:
      - $ref: '#/definitions/ProviderEvent'
      - type: object
        properties:
          agreementId:
            type: string
          requestorId:
            type: string
          demand:
            $ref: '#/definitions/Demand'
          providerId:
            type: string
          offer:
            $ref: '#/definitions/Offer'
