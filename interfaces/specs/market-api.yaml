openapi: 3.0.2
info:
  version: 1.4.0
  title: Yagna Market API
  description: '
    ## Yagna Market

    The Yagna Market is a core component of the Yagna Network, which enables
    computational Offers and Demands circulation. The Market is open for all
    entities willing to buy computations (Demands) or monetize computational
    resources (Offers).

    ## Yagna Market API

    The Yagna Market API is the entry to the Yagna Market through which
    Requestors and Providers can publish their Demands and Offers
    respectively, find matching counterparty, conduct negotiations
    and make an agreement.


    This version of Market API conforms with capability level 1 of the
    <a href="https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg">
    Market API specification</a>.


    Market API contains two roles: Requestors and Providers which are
    symmetrical most of the time (excluding agreement phase).
'
servers:
  - url: /market-api/v1

tags:
  - name: requestor
    description: Requestor part
  - name: provider
    description: Provider part

paths:


  /offers:
    post:
      tags:
        - provider
      summary: Publishes Offer
      operationId: subscribeOffer
      requestBody:
        $ref: '#/components/requestBodies/Offer'
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /offers/{subscriptionId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    delete:
      tags:
        - provider
      operationId: unsubscribeOffer
      responses:
        '204':
          description: Offer revoked.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /offers/{subscriptionId}/events:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/timeout'
      - $ref: '#/components/parameters/maxEvents'
    get:
      tags:
        - provider
      operationId: collectDemands
      responses:
        '200':
          description: Provider event list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderEvent'
              # links: TODO
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /offers/{subscriptionId}/proposals/{proposalId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/proposalId'
    get:
      tags:
        - provider
      summary: Fetches Proposal (ie. Demand) with given proposal id.
      operationId: getProposalDemand
      responses:
        '200':
          $ref: '#/components/responses/Proposal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - provider
      summary: Rejects Proposal (ie. Demand)
      operationId: rejectProposalDemand
      responses:
        '204':
          description: Proposal rejected.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - provider
      summary: Responds with a bespoke Offer to received Demand.
      description: >
        Creates and sends a modified version of original Offer (a
        counter-proposal) adjusted to previously received Proposal (ie. Demand).
        Changes Proposal state to `Draft`. Returns created Proposal id.
      operationId: createProposalOffer
      requestBody:
        $ref: '#/components/requestBodies/Proposal'
      responses:
        '201':
          $ref: '#/components/responses/ProposalId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /demands:
    post:
      tags:
        - requestor
      summary: Publishes Demand
      operationId: subscribeDemand
      requestBody:
        $ref: '#/components/requestBodies/Demand'
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /demands/{subscriptionId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    delete:
      tags:
        - requestor
      operationId: unsubscribeDemand
      responses:
        '204':
          description: Demand revoked.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /demands/{subscriptionId}/events:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/timeout'
      - $ref: '#/components/parameters/maxEvents'
    get:
      tags:
        - requestor
      operationId: collectOffers
      responses:
        '200':
          description: Requestor event list.
          content:
            application/json4:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestorEvent'
          # links: TODO
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /demands/{subscriptionId}/proposals/{proposalId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/proposalId'
    get:
      tags:
        - requestor
      summary: Fetches Proposal (ie. Offer) with given proposal id.
      operationId: getProposalOffer
      responses:
        '200':
          $ref: '#/components/responses/Proposal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - requestor
      summary: Rejects Proposal (ie. Offer)
      operationId: rejectProposalOffer
      responses:
        '204':
          description: Proposal rejected.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - requestor
      summary: Responds with a bespoke Demand to received Offer.
      description: >
        Creates and sends a modified version of original Demand (a
        counter-proposal) adjusted to previously received Proposal (ie. Offer).
        Changes Proposal state to `Draft`. Returns created Proposal id.
      operationId: createProposalDemand
      requestBody:
        $ref: '#/components/requestBodies/Proposal'
      responses:
        '201':
          $ref: '#/components/responses/ProposalId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements:
    post:
      tags:
        - requestor
      summary: Creates Agreement from selected Proposal.
      description: Moves given Proposal to `Approved` state.
      operationId: createAgreement
      requestBody:
        $ref: '#/components/requestBodies/AgreementProposal'
      responses:
        '201':
          description: Agreement created.
          content:
            application/json:
              schema:
                type: string
                description: Agreement Id
          links:
            GetAgreementById:
              description: The response value can be used to fetch Agreement in `GET /agreement/{agreementId}`
              operationId: getAgreement
              #operationRef: '#/paths/~1agreements~1{agreementId}/get'
              parameters:
                agreementId: '$response.body'
            # TODO: more links
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    get:
      tags:
        - requestor
        - provider
      summary: Fetches agreement with given agreement id.
      operationId: getAgreement
      responses:
        '200':
          description: Agreement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - requestor
      summary: Cancels agreement.
      operationId: cancelAgreement
      responses:
        '204':
          description: Agreement canceled.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
          description: Agreement canceled


  /agreements/{agreementId}/confirm:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - requestor
      operationId: confirmAgreement
      summary: Sends Agreement draft to the Provider.
      description: Confirms Agreement self-created via `POST /agreements`
      responses:
        '204':
          description: Agreement confirmed.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /agreements/{agreementId}/wait:
    parameters:
      - $ref: '#/components/parameters/agreementId'
      - $ref: '#/components/parameters/timeout'
    post:
      tags:
        - requestor
      operationId: waitForApproval
      summary: Waits for Agreement approval by the Provider.
      responses:
        '200':
          description: Agreement approval result.
          content:
            application/json:
              schema:
                type: string
                enum: [Approved, Rejected, Cancelled, TimedOut]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/approve:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - provider
      operationId: approveAgreement
      summary: Approves Agreement proposed by the Reqestor.
      responses:
        '204':
          description: Agreement approved.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/reject:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - provider
      summary: Rejects Agreement proposed by the Requestor.
      operationId: rejectAgreement
      responses:
        '204':
          description: Agreement rejected.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/terminate:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - provider
        - requestor
      summary: Terminates approved Agreement.
      operationId: terminateAgreement
      responses:
        '204':
          description: Agreement terminated.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'



components:



  parameters:


    subscriptionId:
      name: subscriptionId
      in: path
      required: true
      schema:
        type: string

    proposalId:
      name: proposalId
      in: path
      required: true
      schema:
        type: string

    timeout:
      name: timeout
      in: query
      schema:
        type: integer
        format: int32

    maxEvents:
      name: maxEvents
      in: query
      schema:
        type: integer
        format: int32

    agreementId:
      name: agreementId
      in: path
      required: true
      schema:
        type: string


  requestBodies:


    Offer:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Offer'

    Demand:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Demand'

    Proposal:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Proposal'

    AgreementProposal:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgreementProposal'


  responses:


    SubscriptionId:
      description: Subscribed.
      content:
        application/json:
          schema:
            type: string
            description: Subscription id

    Proposal:
      description: Proposal.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Proposal'

    ProposalId:
      description: Counter Proposal created.
      content:
        application/json:
          schema:
            type: string
            description: Proposal Id

    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:

    DemandOfferBase:
      type: object
      required:
        - properties
        - constraints
      properties:
        properties:
          type: object
        constraints:
          type: string

    Demand:
      allOf:
        - $ref: '#/components/schemas/DemandOfferBase'
        - type: object
          required:
            - demandId
            - requestorId
          properties:
            demandId:
              type: string
              readOnly: true
            requestorId:
              type: string
              readOnly: true

    Offer:
      allOf:
        - $ref: '#/components/schemas/DemandOfferBase'
        - type: object
          required:
            - offerId
            - providerId
          properties:
            offerId:
              type: string
              readOnly: true
            providerId:
              type: string
              readOnly: true

    Proposal:
      allOf:
        - $ref: '#/components/schemas/DemandOfferBase'
        - type: object
          required:
            - proposalId
            - issuerId
            - state
          properties:
            proposalId:
              type: string
              readOnly: true
            issuerId:
              type: string
              readOnly: true
            state:
              type: string
              readOnly: true
              enum: [Initial, Draft, Rejected, Accepted, Expired]
              description: >
                * `Initial` - proposal arrived from the market as response
                to subscription

                * `Draft` - bespoke counter-proposal issued by one party
                directly to other party (negotiation phase)

                * `Rejected` by other party

                * `Accepted` - promoted into the Agreement draft

                * `Expired` - not accepted nor rejected before validity period
            prevProposalId:
              type: string
              description: >
                id of the proposal from other side which this proposal responds to

    AgreementProposal:
      type: object
      required:
        - proposalId
        - validTo
      properties:
        proposalId:
          type: string
          description: id of the proposal to be promoted to the Agreement
        validTo:
          type: string
          format: date-time
          description: >
            End of validity period. Agreement needs to be accepted, rejected or
            cancellled before this date; otherwise will expire

    Agreement:
      type: object
      required:
        - agreementId
        - demand
        - offer
        - validTo
        - state
      properties:
        agreementId:
          type: string
        demand:
          $ref: '#/components/schemas/Demand'
        offer:
          $ref: '#/components/schemas/Offer'
        validTo:
          type: string
          format: date-time
          description: >
            End of validity period. Agreement needs to be accepted, rejected or
            cancellled before this date; otherwise will expire
        approvedDate:
          type: string
          format: date-time
          description: date of the Agreement approval
        state:
          type: string
          enum: [Proposal, Pending, Cancelled, Rejected, Approved, Expired, Terminated]
          description: >
            * `Proposal` - newly created by a Requestor (based on Proposal)

            * `Pending` - confirmed by a Requestor and send to Provider for approval

            * `Cancelled` by a Requestor

            * `Rejected` by a Provider

            * `Approved` by both sides

            * `Expired` - not accepted, rejected nor cancelled within validity period

            * `Terminated` - finished after approval.
        proposed_signature:
          type: string
        approved_signature:
          type: string
        committed_signature:
          type: string

    Event:
      type: object
      required:
        - eventType
        - eventDate
      discriminator:
        propertyName: eventType
      properties:
        eventType:
          type: string
        eventDate:
          type: string
          format: date-time

    RequestorEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - oneOf:
            - $ref: '#/components/schemas/Proposal'

    ProviderEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - oneOf:
            - $ref: '#/components/schemas/Proposal'
            - $ref: '#/components/schemas/Agreement'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string