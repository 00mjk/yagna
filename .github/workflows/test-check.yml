name: Goth - test

on:
  pull_request:
    branches:
      - master
      - release/*

jobs:
  wait-for-build:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for build to succeed
        uses: tomchv/wait-my-workflow@v1.1.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Tests & Build (ubuntu-latest)"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 7200
      - run: echo '${{ toJson(steps.wait-for-build) }}'

      - name: Fail if test did not launch
        if: steps.wait-for-build.outputs.conclusion == 'does not exist'
        run: echo job does not exist && false

      - name: Fail if test failed
        if: steps.wait-for-build.outputs.conclusion == 'failure'
        run: echo fail && false

      - name: Fail if test timed out
        if: steps.wait-for-build.outputs.conclusion == 'timed_out'
        run: echo Timeout && false

  triggering-workflow-info:
    name: Triggerin Workflow Info
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub event context
        env:
          GH_EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: echo "$GH_EVENT_CONTEXT"

  integration-test:
    name: Integration Tests - test
    runs-on: goth
    needs: wait-for-build
    defaults:
      run:
        working-directory: './goth_tests'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Configure Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.0'

      - name: Configure Poetry
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: 1.1.4
          working-directory: './goth_tests'

      - name: Install dependencies
        run: poetry install --no-root

      - name: Disconnect Docker containers from default network
        continue-on-error: true
        run: |
          docker network inspect docker_default
          sudo apt-get install -y jq
          docker network inspect docker_default | jq ".[0].Containers | map(.Name)[]" | tee /dev/stderr | xargs --max-args 1 -- docker network disconnect -f docker_default

      - name: Remove Docker containers
        continue-on-error: true
        run: docker rm -f $(docker ps -a -q)

      - name: Log in to GitHub Docker repository
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: rust.yml
          commit: ${{ github.event.pull_request.head.sha || github.sha }}
          workflow_conclusion: success
          name: 'Yagna Linux'
          path: /tmp/yagna-build

      - name: Run test suite
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry run poe goth-assets
          poetry run poe goth-tests --config-override docker-compose.build-environment.binary-path=/tmp/yagna-build

      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: goth-logs
          path: /tmp/goth-tests

      # Only relevant for self-hosted runners
      - name: Remove test logs
        if: always()
        run: rm -rf /tmp/goth-tests

      # Only relevant for self-hosted runners
      - name: Remove Poetry virtual env
        if: always()
        # Python version below should agree with the version set up by this job.
        # In the future we'll be able to use the `--all` flag here to remove envs for
        # all Python versions (https://github.com/python-poetry/poetry/issues/3208).
        run: poetry env remove python3.8
