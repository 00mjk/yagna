use std::sync::Arc;

use super::super::callbacks::{CallbackHandler, HandlerSlot};
use super::errors::{AgreementError, NegotiationApiInitError, ProposalError};
use super::messages::*;
use super::messages::{AgreementApproved, AgreementRejected, ProposalReceived, ProposalRejected};

use ya_service_bus::typed as bus;

/// Responsible for communication with markets on other nodes
/// during negotiation phase.
#[derive(Clone)]
pub struct NegotiationApi {
    inner: Arc<NegotiationImpl>,
}

struct NegotiationImpl {
    proposal_received: HandlerSlot<ProposalReceived>,
    proposal_rejected: HandlerSlot<ProposalRejected>,
    agreement_approved: HandlerSlot<AgreementApproved>,
    agreement_rejected: HandlerSlot<AgreementRejected>,
}

impl NegotiationApi {
    pub fn new(
        proposal_received: impl CallbackHandler<ProposalReceived>,
        proposal_rejected: impl CallbackHandler<ProposalRejected>,
        agreement_approved: impl CallbackHandler<AgreementApproved>,
        agreement_rejected: impl CallbackHandler<AgreementRejected>,
    ) -> NegotiationApi {
        let negotiation_impl = NegotiationImpl {
            proposal_received: HandlerSlot::new(proposal_received),
            proposal_rejected: HandlerSlot::new(proposal_rejected),
            agreement_approved: HandlerSlot::new(agreement_approved),
            agreement_rejected: HandlerSlot::new(agreement_rejected),
        };
        NegotiationApi {
            inner: Arc::new(negotiation_impl),
        }
    }

    /// Sent to provider, when Requestor counters initial proposal
    /// generated by market.
    pub async fn initial_proposal(&self) -> Result<(), ProposalError> {
        unimplemented!()
    }

    /// Counter proposals used in all other cases, when proposal
    /// is not in initial state.
    pub async fn counter_proposal(&self) -> Result<(), ProposalError> {
        unimplemented!()
    }

    pub async fn reject_proposal(&self) -> Result<(), ProposalError> {
        unimplemented!()
    }

    /// Sent to provider, when Requestor will call confirm Agreement.
    pub async fn propose_agreement(&self) -> Result<(), AgreementError> {
        unimplemented!()
    }

    /// Sent to provider, when Requestor will call cancel Agreement,
    /// while waiting for approval.
    pub async fn cancel_agreement(&self) -> Result<(), AgreementError> {
        unimplemented!()
    }

    pub async fn on_proposal_received(
        self,
        caller: String,
        msg: ProposalReceived,
    ) -> Result<(), ProposalError> {
        log::debug!(
            "Negotiation API: Received proposal [{}] from [{}].",
            &msg.proposal_id,
            &caller
        );
        self.inner.proposal_received.call(caller, msg).await
    }

    pub async fn on_proposal_rejected(
        self,
        caller: String,
        msg: ProposalRejected,
    ) -> Result<(), ProposalError> {
        log::debug!(
            "Negotiation API: Proposal [{}] rejected by [{}].",
            &msg.proposal_id,
            &caller
        );
        self.inner.proposal_rejected.call(caller, msg).await
    }

    pub async fn on_agreement_approved(
        self,
        caller: String,
        msg: AgreementApproved,
    ) -> Result<(), AgreementError> {
        log::debug!(
            "Negotiation API: Agreement [{}] approved by [{}].",
            &msg.agreement_id,
            &caller
        );
        self.inner.agreement_approved.call(caller, msg).await
    }

    pub async fn on_agreement_rejected(
        self,
        caller: String,
        msg: AgreementRejected,
    ) -> Result<(), AgreementError> {
        log::debug!(
            "Negotiation API: Agreement [{}] rejected by [{}].",
            &msg.agreement_id,
            &caller
        );
        self.inner.agreement_rejected.call(caller, msg).await
    }

    pub async fn bind_gsb(
        &self,
        public_prefix: &str,
        private_prefix: &str,
    ) -> Result<(), NegotiationApiInitError> {
        let myself = self.clone();
        let _ = bus::bind_with_caller(
            &requestor::proposal_addr(public_prefix),
            move |caller: String, msg: ProposalReceived| {
                let myself = myself.clone();
                myself.on_proposal_received(caller, msg)
            },
        );

        let myself = self.clone();
        let _ = bus::bind_with_caller(
            &requestor::proposal_addr(public_prefix),
            move |caller: String, msg: ProposalRejected| {
                let myself = myself.clone();
                myself.on_proposal_rejected(caller, msg)
            },
        );

        let myself = self.clone();
        let _ = bus::bind_with_caller(
            &requestor::agreement_addr(public_prefix),
            move |caller: String, msg: AgreementApproved| {
                let myself = myself.clone();
                myself.on_agreement_approved(caller, msg)
            },
        );

        let myself = self.clone();
        let _ = bus::bind_with_caller(
            &requestor::agreement_addr(public_prefix),
            move |caller: String, msg: AgreementRejected| {
                let myself = myself.clone();
                myself.on_agreement_rejected(caller, msg)
            },
        );
        Ok(())
    }
}
