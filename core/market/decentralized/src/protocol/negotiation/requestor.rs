use std::sync::Arc;

use super::errors::{NegotiationApiInitError, ProposalError, AgreementError};
use super::super::callbacks::HandlerSlot;
use super::messages::{ProposalReceived, ProposalRejected};

/// Responsible for communication with markets on other nodes
/// during negotiation phase.
#[derive(Clone)]
pub struct NegotiationApi {
    inner: Arc<NegotiationImpl>
}

struct NegotiationImpl {
    proposal_received: HandlerSlot<ProposalReceived>,
    proposal_rejected: HandlerSlot<ProposalRejected>,
}

impl NegotiationApi {
    pub async fn bind_gsb(
        &self,
        public_prefix: &str,
        private_prefix: &str,
    ) -> Result<(), NegotiationApiInitError> {
        unimplemented!()
    }

    /// Sent to provider, when Requestor counters initial proposal
    /// generated by market.
    pub async fn initial_proposal(
        &self
    ) -> Result<(), ProposalError> {
        unimplemented!()
    }

    /// Counter proposals used in all other cases, when proposal
    /// is not in initial state.
    pub async fn counter_proposal(
        &self
    ) -> Result<(), ProposalError> {
        unimplemented!()
    }

    pub async fn reject_proposal(
        &self
    ) -> Result<(), ProposalError> {
        unimplemented!()
    }

    /// Sent to provider, when Requestor will call confirm Agreement.
    pub async fn propose_agreement(
        &self
    ) -> Result<(), AgreementError> {
        unimplemented!()
    }

    /// Sent to provider, when Requestor will call cancel Agreement,
    /// while waiting for approval.
    pub async fn cancel_agreement(
        &self
    ) -> Result<(), AgreementError> {
        unimplemented!()
    }
}

